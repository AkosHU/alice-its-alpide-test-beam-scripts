#! /bin/bash
echo -n -e "\n""Processing run"  $1 "\n" >> analysis.log
$EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --option NativePath=$6 --config=$8 -csv $4 converter $1
mv `printf run"%06d"-maskedPixels_*.txt $1` $5/database/
name=`printf $5/lcio/run"%06d"-converter.slcio $1`
nEvent=`lcio_event_counter $name`
echo "Run contains" $nEvent "good events" >> $5/analysis.log
if (($nEvent < 10000)); then 
  echo "Too few events in run" $1 >> analysis.log
  echo "Too few events" >> $5/analysis.log
  exit 1
fi
maff=0.0001
cd $5/logs/
converterName=`printf converter-"%06d".zip $1`
unzip $converterName
converterLogName=`printf converter-"%06d".log $1`
place=`cat $converterLogName | sed -n -e "s/^.*Place of telescope://p" | bc -l`
if (($place == -100)); then
  place=`cat $converterLogName | sed -n -e "s/^.*Place of telescope from config file://p" | bc -l`
fi
rm *.log *.xml
cd -
if (($place > 100)); then
  echo "Treated as noise run" >> $5/analysis.log
  $EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --config=$8 -csv $4 noise $1
else
  echo "Treated as data run" >> $5/analysis.log
  cp $5/../hotpixelPALPIDEfs_noHotPixels_7.slcio `printf $5/database/run"%06d"-hotpixelPALPIDEfs.slcio $1`
  error=`echo $?`
  if (($error > 0))
  then 
    echo "Empty hotpixel file doesn't exist, creating it" >> $5/analysis.log
    maff=1
    $EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --option MaxAllowedFiringFreq=$maff --config=$8 -csv $4 hotpixel $1
    cp `printf $5/database/run"%06d"-hotpixelPALPIDEfs.slcio $1` $5/../hotpixelPALPIDEfs_noHotPixels_7.slcio
  fi
  $EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --option LCIOInputFiles=$5/lcio/run@RunNumber@-converter.slcio --config=$8 -csv $4 clustering $1
  $EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --config=$8 -csv $4 hitmaker $1
  $EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --config=$8 -csv $4 deadColumn $1
  cp $5/../prealign_7_2844-3204.slcio `printf $5/database/run"%06d"-prealignment.slcio $1`
  error=`echo $?`
  if (($error > 0))
  then 
    echo "Prealignment file doesn't exist" >> $5/analysis.log
    exit 1
  fi
  cp $5/../align_7_2844-3204.slcio `printf $5/database/run"%06d"-alignment.slcio $1`
  if (($error > 0))
  then 
    echo "Alignment file doesn't exist" >> $5/analysis.log
    exit 1
  fi
  for ((i=$2;i<=$3;i++)) do
    $EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --option dutID="$i" --config=$8 -csv $4 fitter $1
    cd $5/logs/
    unzip `printf fitter-"%06d".zip $1`
    fitterName=`printf fitter-"%06d".log $1`
    nTrack=`cat $fitterName |  sed -n -e "s/^.*Total number of reconstructed tracks//p" | bc -l`
    rm *.log *.xml
    cd -
    if (($nTrack<100))
    then
      echo "Too few tracks found in DUT" $i", moving to next DUT" >> $5/analysis.log
      fittingError=1
      continue
    else
      echo $nTrack "tracks used in DUT" $i >> $5/analysis.log
      fittingError=0
    fi
    $EUTELESCOPE/jobsub/jobsub.py --option DatabasePath=$5/database --option HistogramPath=$5/histogram --option LcioPath=$5/lcio --option LogPath=$5/logs --option dutID="$i" --config=$8 -csv $4 analysis $1
    cd $5/logs/
    unzip `printf analysis-"%06d".zip $1`
    analysisName=`printf analysis-"%06d".log $1`
    efficiencies=`awk '/Overall efficiency of pALPIDEfs sectors/{x=NR+4;next}(NR<=x){print}' $analysisName | sed -n -e 's/^.*\[ MESSAGE4 \"Analysis\"\] //p'`
    rm *.log *.xml
    cd -
    echo "Efficiencies of the four sectors in DUT" $i":" >> $5/analysis.log 
    effArray=($efficiencies)
    for ((j=1;j<=10;j=j+3)) do
      echo ${effArray[j-1]} >> $5/analysis.log
    done
    mv `printf $5/logs/analysis-"%06d".zip $1` `printf $5/logs/analysis-"%06d"_DUT$i.zip $1`
  done
  if (($fittingError==1))
  then
    echo "Processing exited with fitting errors for run" $1 >> analysis.log
    echo "Processing exited with fitting errors" >> $5/analysis.log
  else
    echo "Processing exited without errors for run" $1 >> analysis.log
    echo "Processing exited without errors" >> $5/analysis.log
  fi
  if [ "$9" != "DEBUG" ]; then
    rm -r $5/lcio $5/database
  fi
  #Quality checks
  outputFolder=$5/Plots/
  mkdir $outputFolder
  mkdir $outputFolder/important
  mkdir $outputFolder/others
  root -l -q -b qualityCheck.C\($1,$2,$3,"\"$5/histogram\"","\"$outputFolder\"",$7\)
  echo "QA written to" $outputFolder  >> $5/analysis.log
fi
